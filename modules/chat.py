__version__ = (1, 0, 0)

import contextlib

"""
    ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà‚ñÄ ‚ñà ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà
    ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñÑ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÑ
    –ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ 2022 t.me/morisummermods
    –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏ Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
"""
# –º–µ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @morisummermods
# –º–µ—Ç–∞ –±–∞–Ω–Ω–µ—Ä: https://i.imgur.com/H1vPM6U.jpg

from telethon.tl.types import Message
import requests
import logging
import re

from .. import loader, utils  # noqa

logger = logging.getLogger(__name__)


@loader.tds
class ChatGPT(loader.Module):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API ChatGPT"""

    strings = {
        "name": "ChatGPT",
        "no_args": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            " –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>"
        ),
        "question": (
            "<emoji document_id=5974038293120027938>üë§</emoji> <b>–í–æ–ø—Ä–æ—Å:</b>"
            " {question}\n"
        ),
        "answer": (
            "<emoji document_id=5199682846729449178>ü§ñ</emoji> <b>–û—Ç–≤–µ—Ç:</b> {answer}"
        ),
        "loading": "<code>–ó–∞–≥—Ä—É–∑–∫–∞...</code>",
        "no_api_key": (
            "<b>üö´ –ù–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á</b>\n<i><emoji"
            " document_id=5199682846729449178>‚ÑπÔ∏è</emoji> –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º"
            " —Å–∞–π—Ç–µ OpenAI –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Ñ–∏–≥</i>"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_KEY", None, "–ö–ª—é—á API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ChatGPT"
        )

    @loader.unrestricted
    @loader.ratelimit
    async def chatgptcmd(self, message: Message):
        """–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ChatGPT"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_args", message))
            return
        if not self.config["API_KEY"]:
            await utils.answer(message, self.strings("no_api_key", message))
            return
        await utils.answer(message, self.strings("loading", message))
        try:
            response = requests.post(
                "https://api.openai.com/v1/engines/chatgpt-ru/completions",
                headers={"Authorization": f"sk-{self.config['API_KEY']}"},
                json={
                    "prompt": f"Q: {args}\nA:",
                    "max_tokens": 50,
                    "temperature": 0.9,
                    "top_p": 1,
                    "frequency_penalty": 0,
                    "presence_penalty": 0.6,
                    "stop": "\n
